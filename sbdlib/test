import unittest
import dynetx as dn
import networkx as nx
import sobigdata as sbd
import numpy as np


class SoBigDataTestCase(unittest.TestCase):

    def test_graph_slice(self):
        g = dn.DynGraph()
        g.add_interaction(1, 2, 2)
        g.add_interaction(1, 2, 2, e=6)
        g.add_interaction(1, 2, 7, e=11)
        g.add_interaction(1, 2, 8, e=15)
        g.add_interaction(1, 2, 18)
        g.add_interaction(1, 2, 19)
        h = sbd.graph_slice(g, 3)
        self.assertIsInstance(h, nx.Graph)
        self.assertEqual(h.number_of_nodes(), 2)
        self.assertEqual(h.number_of_edges(), 1)

    def test_broadcast_centrality(self):
        g = dn.DynGraph()
        g.add_interaction(1, 2, 2, 5)
        g.add_interaction(1, 3, 2, 5)
        g.add_interaction(2, 3, 4)
        bc, alpha = sbd.broadcast_centrality(g)
        self.assertAlmostEqual(bc[1], 0.701091807280032, 10)
        self.assertAlmostEqual(bc[2], 0.504217352817621, 10)
        self.assertEqual(alpha, 0.45)
        bc, alpha = sbd.broadcast_centrality(g, 0.45)
        self.assertAlmostEqual(bc[1], 0.701091807280032, 10)
        self.assertAlmostEqual(bc[2], 0.504217352817621, 10)
        self.assertEqual(alpha, 0.45)

    def test_receive_centrality(self):
        g = dn.DynGraph()
        g.add_interaction(1, 2, 2, 5)
        g.add_interaction(1, 'node', 2, 5)
        g.add_interaction(2, 'node', 4)
        rc, alpha = sbd.receive_centrality(g)
        self.assertAlmostEqual(rc[1], 0.586484236968094, 10)
        self.assertAlmostEqual(rc['node'], 0.572728661666217, 10)
        self.assertEqual(alpha, 0.45)
        rc, alpha = sbd.receive_centrality(g, 0.45)
        self.assertAlmostEqual(rc[1], 0.586484236968094, 10)
        self.assertAlmostEqual(rc['node'], 0.572728661666217, 10)
        self.assertEqual(alpha, 0.45)

    def test_first_order_broadcast_centrality(self):
        g = dn.DynGraph()
        g.add_interaction(1, 2, 2, 5)
        g.add_interaction(1, 'node', 2, 5)
        g.add_interaction(2, 'node', 4)
        rc, alpha = sbd.first_order_broadcast_centrality(g)
        self.assertAlmostEqual(rc[1], 0.701091807280032, 10)
        self.assertAlmostEqual(rc['node'], 0.504217352817621, 10)
        self.assertEqual(alpha, 0.45)
        rc, alpha = sbd.first_order_broadcast_centrality(g, 0.45)
        self.assertAlmostEqual(rc[1], 0.701091807280032, 10)
        self.assertAlmostEqual(rc['node'], 0.504217352817621, 10)
        self.assertEqual(alpha, 0.45)

    def test_first_order_receive_centrality(self):
        g = dn.DynGraph()
        g.add_interaction(1, 2, 2, 5)
        g.add_interaction(1, 'node', 2, 5)
        g.add_interaction(2, 'node', 4)
        rc, alpha = sbd.first_order_receive_centrality(g)
        self.assertAlmostEqual(rc[1], 0.615160904649326, 10)
        self.assertAlmostEqual(rc['node'], 0.557484108020589, 10)
        self.assertEqual(alpha, 0.45)
        rc, alpha = sbd.first_order_receive_centrality(g, 0.45)
        self.assertAlmostEqual(rc[1], 0.615160904649326, 10)
        self.assertAlmostEqual(rc['node'], 0.557484108020589, 10)
        self.assertEqual(alpha, 0.45)

    def test_lanczos_symmetric_exponential(self):
        A = np.arange(0, 1, 0.01)
        A = A.reshape(10, 10)
        A = A + A.transpose()
        u = np.arange(0, 10)
        q = sbd.lanczos_symmetric_exponential(A, u)
        self.assertAlmostEqual(q, 13165244.30434994, 2)
        q = sbd.lanczos_symmetric_exponential(A, u, 5)
        self.assertAlmostEqual(q, 13165244.30434994, 2)

    def test_orthogonal_lanczos_symmetric_exponential(self):
        A = np.arange(0, 1, 0.01)
        A = A.reshape(10, 10)
        A = A + A.transpose()
        u = np.arange(0, 10)
        q = sbd.orthogonal_lanczos_symmetric_exponential(A, u)
        self.assertAlmostEqual(q, 13165244.30434994, 2)
        q = sbd.orthogonal_lanczos_symmetric_exponential(A, u, 5)
        self.assertAlmostEqual(q, 13165244.30434994, 2)

    def test_lanczos_exponential(self):
        A = np.arange(0, 1, 0.01)
        A = A.reshape(10, 10)
        A = A + A.transpose()
        u = np.arange(0, 10)
        v = np.ones(10)
        q = sbd.lanczos_exponential(A, u, v)
        self.assertAlmostEqual(q, 2466072.870541437, 2)
        q = sbd.lanczos_exponential(A, u, v, 5)
        self.assertAlmostEqual(q, 2466072.870541437, 2)

    def test_total_communicability(self):
        g = nx.Graph()
        g.add_edge(1, 2)
        g.add_edge(2, 3)
        tc = sbd.total_communicability(g)
        self.assertAlmostEqual(tc[1], 3.546482428617160, 8)
        tc = sbd.total_communicability(g, 3)
        self.assertAlmostEqual(tc[1], 59.402061428302126, 8)

    def node_total_communicability(self):
        g = nx.Graph()
        g.add_edge(1, 2)
        g.add_edge(2, 3)
        tc_node_1 = sbd.node_total_communicability(g, 1)
        self.assertAlmostEqual(tc_node_1, 3.546482428617160, 8)
        tc_node_2 = sbd.node_total_communicability(g, 2, 3)
        self.assertAlmostEqual(tc_node_2, 84.001248823238072, 8)

    def test_node_total_communicability_lanczos(self):
        g = nx.Graph()
        g.add_edge(1, 2)
        g.add_edge(2, 3)
        tc_node_1 = sbd.node_total_communicability_lanczos(g, 1)
        self.assertAlmostEqual(tc_node_1, 3.546482428617160, 8)
        tc_node_2 = sbd.node_total_communicability_lanczos(g, 2, 3)
        self.assertAlmostEqual(tc_node_2, 84.001248823238072, 8)
        tc_node_3 = sbd.node_total_communicability_lanczos(g, 3, 3, 5)
        self.assertAlmostEqual(tc_node_3, 59.402061428302119, 8)

    def test_total_network_communicability(self):
        g = nx.Graph()
        g.add_edge(1, 2)
        g.add_edge(2, 3)
        tc = sbd.total_network_communicability(g)
        self.assertAlmostEqual(tc, 12.007746157860071, 8)
        tc = sbd.total_network_communicability(g, 3)
        self.assertAlmostEqual(tc, 202.8053716798423, 7)
        tc = sbd.total_network_communicability(g, 3, 5)
        self.assertAlmostEqual(tc, 202.8053716798423, 7)

    def test_edge_total_communicability(self):
        g = nx.Graph()
        g.add_edge(1, 2)
        g.add_edge(2, 3)
        tc_edge_12 = sbd.edge_total_communicability(g, 1, 2)
        self.assertAlmostEqual(tc_edge_12, 17.430185523165417, 8)
        tc_edge_12 = sbd.edge_total_communicability(g, 1, 2, 3)
        self.assertAlmostEqual(tc_edge_12, 4989.847342652080, 7)

    def test_edge_total_communicability_lanczos(self):
        g = nx.Graph()
        g.add_edge(1, 2)
        g.add_edge(2, 3)
        tc_edge_12 = sbd.edge_total_communicability_lanczos(g, 1, 2)
        self.assertAlmostEqual(tc_edge_12, 17.430185523165417, 8)
        tc_edge_12 = sbd.edge_total_communicability_lanczos(g, 1, 2, 3)
        self.assertAlmostEqual(tc_edge_12, 4989.847342652080, 7)
        tc_edge_12 = sbd.edge_total_communicability_lanczos(g, 1, 2, 3, 5)
        self.assertAlmostEqual(tc_edge_12, 4989.847342652080, 7)

    def test_total_communicability_oriented_graph(self):
        g = nx.DiGraph()
        g.add_edge(1, 2)
        g.add_edge(1, 3)
        g.add_edge(2, 3)
        g.add_edge(3, 1)
        bc, rc = sbd.total_communicability_oriented_graph(g)
        self.assertAlmostEqual(bc[1], 5.812568463229509, 8)
        self.assertAlmostEqual(rc[1], 2.718281828459045, 8)
        bc, rc = sbd.total_communicability_oriented_graph(g, 3)
        self.assertAlmostEqual(bc[1], 150.1490584916712, 8)
        self.assertAlmostEqual(rc[1], 20.0855369231877, 8)

    def test_node_oriented_total_communicability(self):
        g = nx.DiGraph()
        g.add_edge(1, 2)
        g.add_edge(1, 3)
        g.add_edge(2, 3)
        g.add_edge(3, 1)
        node_tc = sbd.node_oriented_total_communicability(g, 2)
        self.assertAlmostEqual(node_tc, 1.590609756406463, 8)
        node_tc = sbd.node_oriented_total_communicability(g, 2, t=3)
        self.assertAlmostEqual(node_tc, 20.094045450698111, 8)
        node_tc = sbd.node_oriented_total_communicability(g, 2, t=3, role=1)
        self.assertAlmostEqual(node_tc, 20.094045450698129, 8)
        node_tc = sbd.node_oriented_total_communicability(g, 2, t=3, role=1, m=5)
        self.assertAlmostEqual(node_tc, 20.094045450698129, 8)


if __name__ == '__main__':
    unittest.main()
