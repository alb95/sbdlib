import networkx as nx
from scipy.sparse.linalg import expm_multiply
from numpy import ones, dot


def total_communicability(G, t=None):

    '''
    :param G: a networkx/igraph object
    :param t: optional parameter for t
    :return: a numpy vector denoting the total communicability of graph G
    '''

   # G = convert_graph_formats(G,nx.graph)
    n = G.number_of_nodes()
    e = ones(n)  # vector of all ones
    Adj = nx.adjacency_matrix(G)
    if t is not None:
        Adj = Adj*t
    tot_communicability = expm_multiply(Adj, e)
    return tot_communicability

def subgraph_total_communicability(G, k, t=None):

    '''
    :param G: a networkx/igraph object
    :return: total communicability of node k
    '''

    # G = convert_graph_formats(G,nx.graph)
    n = G.number_of_nodes()
    e = ones(n)  # vector of all ones
    Adj = nx.adjacency_matrix(G)
    if t is not None:
        Adj = Adj*t
    tot_communicability = expm_multiply(Adj, e)

    return tot_communicability[k]

def network_communicability(G, t=None):

    '''
    :param G: a networkx/igraph object
    :return: network communicability
    '''

    # G = convert_graph_formats(G,nx.graph)
    n = G.number_of_nodes()
    e = ones(n)  # vector of all ones
    Adj = nx.adjacency_matrix(G)
    if t is not None:
        Adj=Adj*t
    tot_communicability = expm_multiply(Adj, e)
    net_communicability= dot(e,tot_communicability)
    return net_communicability
