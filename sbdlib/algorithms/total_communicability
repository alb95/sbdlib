import networkx as nx
from scipy.sparse.linalg import expm_multiply
from numpy import ones, dot


def total_communicability(G, t=None):

    '''
    compute the total communicability of graph G
    :param G: a networkx object
    :param t: scalar, optional; when exponentiate multiply the adjacency matrix by t

    :return: a dictionary with the total communicability of graph G
    '''

   # G = convert_graph_formats(G,nx.graph)
    n = G.number_of_nodes()
    node_list = G.nodes
    e = ones(n)  # vector of all ones
    Adj = nx.adjacency_matrix(G)
    if t is not None:
        Adj = Adj*t
    tot_communicability = expm_multiply(Adj, e)
    centrality = dict(zip(node_list, tot_communicability))
    return centrality

def node_total_communicability(G, node_name, t=None):

    '''
    :param G: a networkx object
    :param node_name: int or string
    :param t: scalar, optional; when exponentiate multiply the adjacency matrix by t

    :return: total communicability of node k
    '''

    tot_communicability = total_communicability(G, t)
    node_tc = tot_communicability[node_name]
    return node_tc

def total_network_communicability(G, t=None):

    '''
    :param G: a networkx object
    :param t: scalar, optional; when exponentiate multiply the adjacency matrix by t

    :return: network communicability
    '''

    # G = convert_graph_formats(G,nx.graph)
    n = G.number_of_nodes()
    e = ones(n)  # vector of all ones
    Adj = nx.adjacency_matrix(G)
    if t is not None:
        Adj=Adj*t
    tot_communicability = expm_multiply(Adj, e)
    net_communicability= dot(e,tot_communicability)
    return net_communicability

def edge_total_communicability(G, node_1, node_2, t=None):

    '''
    :param G: a networkx object
    :param node_1: int or string denoting the node name
    :param node_2: int or string denoting the node name
    :param t: scalar, optional; when exponentiate multiply the adjacency matrix by t

    :return: total communicability of edge (node_1, node_2)
    '''

    # G = convert_graph_formats(G,nx.graph)
    n = G.number_of_nodes()
    Adj = nx.adjacency_matrix(G)
    node_list = G.nodes
    if t is not None:
        Adj = Adj * t
    tot_communicability = expm_multiply(Adj, ones(n))
    tot_communicability = dict(zip(G.nodes, tot_communicability))
    edge_tc = tot_communicability[node_1]*tot_communicability[node_2]
    return edge_tc

